#!/usr/bin/env python

from __future__ import print_function

import os
import sys


def inform(s):
    COLOR_BLUE_NORMAL = '\033[94m'
    COLOR_BLUE_BOLD = '\033[1;94m'
    COLOR_RESET = '\033[0m'
    DEFAULT_TEXT = 'You know you have an alias for that, right? '
    text = os.getenv('ZSH_PLUGINS_ALIAS_TIPS_TEXT', DEFAULT_TEXT)
    print(COLOR_BLUE_NORMAL + text + COLOR_BLUE_BOLD + s + COLOR_RESET)


def parse_aliases(raw_aliases):
    aliases = [line.strip().split('=', 1) for line in raw_aliases]
    mapping = []
    for alias_line in aliases:
        try:
            alias = alias_line[0].strip('\'')
            original = alias_line[1].strip('\'')
            mapping.append((alias, original))
        except:
            # If this fails, it's likely a multi-line declared alias,
            # which is currently not handled.
            pass
    return mapping

def main():
    excluded_aliases = os.getenv('ZSH_PLUGINS_ALIAS_TIPS_EXCLUDES', '').split()
    raw_aliases = sys.stdin.readlines()
    aliases = parse_aliases(raw_aliases)
    input = sys.argv[1]

    max_idx, res = 0, None
    for alias, expanded in aliases:
        if alias in excluded_aliases:
            continue
        if input.startswith(expanded):
            idx = len(expanded)
            if idx > max(len(alias), max_idx):
                max_idx = idx
                res = alias + input[idx:]
    if res:
        inform(res)


if __name__ == '__main__':
    main()
