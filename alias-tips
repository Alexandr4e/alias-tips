#!/usr/bin/env python

from __future__ import print_function

import os
import sys


def inform(s, prefix):
    color_blue_normal = '\033[94m'
    color_blue_bold = '\033[1;94m'
    color_reset = '\033[0m'
    print(color_blue_normal + prefix + color_blue_bold + s + color_reset)


def parse_aliases(raw_aliases):
    aliases = [line.strip().split('=', 1) for line in raw_aliases]
    mapping = []
    for alias_line in aliases:
        try:
            alias = alias_line[0].strip('\'')
            original = alias_line[1].strip('\'')
            mapping.append((alias, original))
        except:
            # If this fails, it's likely a multi-line declared alias,
            # which is currently not handled.
            pass
    return mapping


def exclude_aliases(aliases, excludes):
    return [alias for alias in aliases if alias[0] not in excludes]


def expand_input(aliases, input):
    max_exp, max_expanded = 0, None
    for alias, expanded in aliases:
        if input.startswith(alias + ' '):
            if len(expanded) > max_exp:
                max_expanded = input.replace(alias, expanded)
                max_exp = len(expanded)
    return max_expanded if max_expanded else input


def find_alias(aliases, input):
    max_idx, res = 0, None
    for alias, expanded in aliases:
        if input.startswith(expanded):
            idx = len(expanded)
            if idx > max(len(alias), max_idx):
                max_idx = idx
                res = alias + input[idx:]
    return res


def main():
    input    = sys.argv[1].strip()
    aliases  = parse_aliases(sys.stdin.readlines())
    prefix   = os.getenv('ZSH_PLUGINS_ALIAS_TIPS_TEXT', 'Alias tip: ')
    excludes = os.getenv('ZSH_PLUGINS_ALIAS_TIPS_EXCLUDES', '')
    expand   = os.getenv('ZSH_PLUGINS_ALIAS_TIPS_EXPAND', '0')

    if excludes:
        aliases = exclude_aliases(aliases, excludes.split())

    if expand == '1':
        input = expand_input(aliases, input)

    alias = find_alias(aliases, input)
    if alias:
        inform(alias, prefix)


if __name__ == '__main__':
    main()
